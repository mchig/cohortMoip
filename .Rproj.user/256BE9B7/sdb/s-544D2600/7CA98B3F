{
    "collab_server" : "",
    "contents" : "library(zoo)\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(lubridate)\nlibrary(gmodels)\nlibrary(reshape2)\nlibrary(gridExtra)\nlibrary(ggplot2)\n\n\ncohortSummary <- function (dataRaw = NULL, tpv_group = \"all\", path = NULL) {\n  start_time <- Sys.time()\n  print(\"Working on it...\")\n\n  if (is.null(dataRaw)){\n      if (is.null(path)) {\n          path <- readline(prompt=\"Enter complete file path: \")\n      }\n      dataRaw<- read.csv(path,stringsAsFactors = FALSE,encoding = \"UTF-8\")\n\n      dataRaw$tpv.group[dataRaw$tpv.group==\"Large\"]<-\"F5\"\n\n      names(dataRaw) <- c(\"account_id\",\"tpv_group_bd\",\"login\",\"payment_date\",\"account_fauth\",\"state\",\"super_integrator\", \"tpv\",\"receita\",\n                          \"n_payments_submitted\", \"n_payments_canceled\", \"n_payments_authorized\", \"n_payments_analysis\", \"n_payments_pre\",\n                          \"n_payments\")\n  }\n\n      dataRaw$tpv.group[dataRaw$tpv.group==\"Large\"]<-\"F5\"\n\n      names(dataRaw) <- c(\"account_id\",\"tpv_group_bd\",\"login\",\"payment_date\",\"account_fauth\",\"state\",\"super_integrator\", \"tpv\",\"receita\",\n                       \"n_payments_submitted\", \"n_payments_canceled\", \"n_payments_authorized\", \"n_payments_analysis\", \"n_payments_pre\",\n                       \"n_payments\", \"owner_name\")\n\n      grp_data <- group_by(dataRaw, account_id, login, tpv_group_bd, account_fauth, payment_date)\n      sum_data <- summarise(grp_data, tpv = sum(tpv), receita = sum(receita), n_payments_submitted = sum(n_payments_submitted),\n                            n_payments_canceled = sum(n_payments_canceled), n_payments_authorized = sum(n_payments_authorized),\n                            n_payments_analysis = sum(n_payments_analysis), n_payments_pre = sum(n_payments_pre),\n                            n_payments = sum(n_payments))\n\n      fatData <- sum_data[!(sum_data$payment_date==\"\"),]\n      grp_fat <- group_by(fatData, account_id)\n      sum_fat <- summarise(grp_fat, tpv = max(tpv, na.rm = TRUE))\n\n      sum_fat$tpv_group<-NA\n      sum_fat$tpv_group[sum_fat$tpv >=0 & sum_fat$tpv <1000] <- \"F0\"\n      sum_fat$tpv_group[sum_fat$tpv >=1000 & sum_fat$tpv <5000] <- \"F1\"\n      sum_fat$tpv_group[sum_fat$tpv >=5000 & sum_fat$tpv <20000] <- \"F2\"\n      sum_fat$tpv_group[sum_fat$tpv >=20000 & sum_fat$tpv <100000] <- \"F3\"\n      sum_fat$tpv_group[sum_fat$tpv >=100000 & sum_fat$tpv <500000] <- \"F4\"\n      sum_fat$tpv_group[sum_fat$tpv >=500000 & sum_fat$tpv <1000000] <- \"F5\"\n      sum_fat$tpv_group[sum_fat$tpv >=1000000 & sum_fat$tpv <5000000] <- \"F6\"\n      sum_fat$tpv_group[sum_fat$tpv >=5000000 & sum_fat$tpv] <- \"F7\"\n\n      sum_fat <- sum_fat[,c(which(names(sum_fat)==\"account_id\"),which(names(sum_fat)==\"tpv_group\"))]\n\n      sum_data <- merge(sum_data, sum_fat, by = \"account_id\", all = TRUE)\n\n      if (tpv_group == \"all\") {\n          tpv_group <- unique(sum_data$tpv_group)\n      }\n\n      data <- sum_data[sum_data$tpv_group%in%tpv_group&!(sum_data$payment_date==\"\"),]\n      #data <- dataRaw[dataRaw$tpv.group%in%tpv_group,]\n\n\n\n      data$payment_date <- as.yearmon(data$payment_date,\"%m/%Y\")\n      data$account_fauth <- as.Date(data$account_fauth)\n      data$account_fauth <- as.yearmon(data$account_fauth,\"%m/%Y\")\n\n      ##arrange date first payment\n      data <- data[order(data$account_id),]\n      grp <- group_by(data,account_id)\n      fdTPV <- summarise(grp, first_payment = min(payment_date))\n\n      data <- merge(data,fdTPV,by = \"account_id\", all = TRUE)\n\n      data$m <- ((year(data$payment_date) - year(data$first_payment))*12 + (month(data$payment_date) - month(data$first_payment)))\n\n      #organize mX\n      all_m <- 0:max(data$m)\n      diff_m <- setdiff(all_m,unique(data$m))\n\n      if (length(diff_m)>0){\n          for (i in 1:length(diff_m)){\n              data[dim(data)[1]+1,] <- NA\n              data[dim(data)[1],which(names(data)==\"m\")] <- diff_m[i]\n          }\n      }\n\n      #organize first_payment\n      max_date <- max(unique(data$payment_date),na.rm = TRUE)\n      min_date <- min(unique(data$first_payment),na.rm = TRUE)\n      all_date <- as.yearmon(seq(as.numeric(min_date),as.numeric(max_date),by = 1/12))\n      diff_date <- as.yearmon(setdiff(all_date,unique(data$first_payment)))\n\n      if (length(diff_date)>0){\n          for (i in 1:length(diff_date)){\n              data[dim(data)[1]+1,] <- NA\n              data[dim(data)[1],which(names(data)==\"first_payment\")] <- diff_date[i]\n          }\n      }\n\n      ##client count\n      client_table <- xtabs(~first_payment+m,data = data, na.action = na.pass)\n      client_count <- colSums(client_table)\n      client_count_perc <- round((client_count/client_count[1]),digits = 4)\n\n      ##tpv count/perc\n      tpv_table <- xtabs(tpv~first_payment+m,data = data, na.action = na.pass)\n      client_tpv_sum <- colSums(tpv_table)\n      client_tpv <- colSums(tpv_table)\n      client_tpv[1] <- client_tpv[1]/client_count[1]\n      for (i in 2:length(client_tpv)){\n\n          client_tpv[i] <- (client_tpv[i]/client_count[1]) + client_tpv[i-1]\n      }\n      client_tpv_perc <- round((client_tpv/client_tpv[1]),digits = 4)\n\n      client_tpv_perc <- client_tpv_sum\n      for (i in 1:(length(client_tpv_perc)-1)){\n          if(client_tpv_sum[i]!=0){\n              client_tpv_perc[i] <- (client_tpv_sum[i])/sum(tpv_table[(1:(length(tpv_table[,1])-i+1)),1])\n          }\n          else {\n              client_tpv_perc[i] <- 0\n          }\n      }\n\n      ##receita count/perc\n      receita_table <- xtabs(receita~first_payment+m,data = data, na.action = na.pass)\n      client_receita_sum <- colSums(receita_table)\n      client_receita <- colSums(receita_table)\n      client_receita[1] <- client_receita[1]/client_count[1]\n      for (i in 2:length(client_receita)){\n\n          client_receita[i] <- (client_receita[i]/client_count[1]) + client_receita[i-1]\n      }\n\n      client_receita_perc <- client_receita_sum\n      for (i in 1:length(client_receita_perc)){\n          if(client_receita_sum[i]!=0){\n              client_receita_perc[i] <- (client_receita_sum[i])/sum(receita_table[(1:(length(receita_table[,1])-i+1)),1])\n          }\n          else {\n              client_receita_perc[i] <- 0\n          }\n      }\n\n\n      ##churn mes\n      churn_perc <- client_count\n      for (i in 1:(length(churn_perc)-1)){\n        if(client_count[i]!=0){\n          churn_perc[i] <- ((client_count[i] - client_count[i+1] - client_table[(length(client_table[,1])-i+1),i])/client_count[i])\n        }\n        else {\n          churn_perc[i] <- 0\n        }\n      }\n\n\n      churn_perc[-length(churn_perc)]\n\n      ##summary data\n      summary <- list (data = data,\n                       client_table = client_table, client_count = client_count,client_count_perc = client_count_perc,\n                       tpv_table = tpv_table, client_tpv = client_tpv, client_tpv_perc = client_tpv_perc,\n                       receita_table = receita_table, client_receita = client_receita, client_receita_perc = client_receita_perc,\n                       churn_perc = churn_perc)\n\n      print(Sys.time()-start_time)\n\n      return(summary)\n}\n\nchurnBase <- function(base , churn_time = 4, tpv_group = c(\"F0\",\"F1\",\"F2\",\"F3\",\"F4\",\"F5\", \"F6\", \"F7\"), type = \"all\") {\n\n    comercial<- read.csv(\"C:/Users/mauricio.chigutti/Google Drive/Clientes do Comercial/clientesComercial.csv\",\n                         stringsAsFactors = FALSE, sep = \";\")\n    comercial <- comercial[comercial$Account.Id!=0,c(2,3)]\n    names(comercial) <- c(\"owner_name\",\"account.id\")\n\n    base <- merge(base,comercial,by = \"account.id\", all = TRUE)\n\n    source(\"C:/Users/mauricio.chigutti/Google Drive/Cohort/cohortSummary.R\")\n\n    if ( type == \"touch\"){\n        base <- base[!is.na(base$owner_name),]\n    }else if(type == \"touchless\"){\n        base <- base[is.na(base$owner_name),]\n    }\n\n    table <- cohortSummary(base,tpv_group = tpv_group)\n\n    month_now <- as.yearmon(now())\n    month_min <- month_now - (churn_time-1)/12\n\n    n <- 1\n    mymonths <- vector()\n    mymonths[1] <- month_now\n    while(churn_time-n > 0){\n        mymonths[n+1] <- month_now - (n)/12\n        n = n + 1\n    }\n    mymonths <- as.character(as.yearmon(mymonths))\n\n    final <- list()\n    final$table <- table$client_table[rownames(table$client_table)%in%mymonths,c(1:churn_time)]\n\n    ##churn mes\n    client_perc <- colSums(final$table)\n    client_sum <- colSums(final$table)\n    for (i in 1:(length(client_perc))){\n        if(client_sum[i]!=0){\n            client_perc[i] <- (client_sum[i])/sum(final$table[(1:(length(final$table[,1])-i+1)),1])\n        }\n        else {\n            client_perc[i] <- 0\n        }\n    }\n\n    final$client_perc <- 1-client_perc\n\n    return (final)\n}\n\nplotSafra <- function (table){\n    cohortPerc <- data.frame(m = paste(\"M\",names(table$client_perc),sep=\"\"), percentage = round(100*table$client_perc,digits = 0))\n\n    ggplot(cohortPerc, aes(x=m, y=percentage, group = 1)) +\n        geom_line() +\n        geom_point() +\n        #geom_text(data=cohortPerc,\n        #          aes(y=percentage, label= paste(percentage,\"%\",sep=\"\"),vjust=-0.5),size = 5) +\n        ggtitle(\"teste\")\n}\n\nplotSafraTable <- function (table){\n    tt <- ttheme_default(colhead=list(fg_params = list(parse=TRUE)))\n    tbl <- tableGrob(table$table, theme=tt)\n    grid.arrange(tbl)\n}\n\ngetBaseData <- function (File = \"C:/Users/mauricio.chigutti/Google Drive/Cohort/Churn4.csv\") {\n    base<- read.csv(File, stringsAsFactors = FALSE,encoding = \"UTF-8\")\n}\n",
    "created" : 1501780032044.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "10|76|174|0|\n176|118|225|0|\n227|30|236|0|\n238|35|242|0|\n",
    "hash" : "1095084665",
    "id" : "7CA98B3F",
    "lastKnownWriteTime" : 1501780044,
    "last_content_update" : 1501780044474,
    "path" : "C:/Users/mauricio.chigutti/Google Drive/Programas R/packages/cohortMoip/R/cohortSummary.R",
    "project_path" : "R/cohortSummary.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}